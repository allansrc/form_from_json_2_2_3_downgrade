import '../../domain/entites/columns_entity.dart';
import '../../domain/entites/components_entity.dart';
import '../../domain/entites/conditional_entity.dart';
import '../../domain/entites/data_entity.dart';
import '../../domain/entites/date_picker_entity.dart';
import '../../domain/entites/fields_entity.dart';
import '../../domain/entites/file_types_entity.dart';
import '../../domain/entites/fuse_options_entity.dart';
import '../../domain/entites/indexeddb_entity.dart';
import '../../domain/entites/kickbox_entity.dart';
import '../../domain/entites/overlay_entity.dart';
import '../../domain/entites/properties_entity.dart';
import '../../domain/entites/time_picker_entity.dart';
import '../../domain/entites/validate_entity.dart';
import '../../domain/entites/values_entity.dart';
import '../../domain/entites/widget_entity.dart';
import 'columns_adapter.dart';
import 'conditional_adapter.dart';
import 'data_adapter.dart';
import 'date_picker_adapter.dart';
import 'fields_adapter.dart';
import 'file_types_adpter.dart';
import 'fuse_options_adapter.dart';
import 'indexeddb_adapter.dart';
import 'kickbox_adapter.dart';
import 'overlay_adapter.dart';
import 'properties_adapter.dart';
import 'time_picker_adapter.dart';
import 'validate_adapter.dart';
import 'values_adapter.dart';
import 'widget_adapter.dart';

// ignore: avoid_classes_with_only_static_members
class ComponentsAdapter extends ComponentEntity {
  ComponentsAdapter({
    required String label,
    required String labelPosition,
    required String labelWidth,
    required String labelMargin,
    required String placeholder,
    required String description,
    required String tooltip,
    required String prefix,
    required String suffix,
    required WidgetEntity widget,
    required String inputMask,
    required String displayMask,
    required bool allowMultipleMasks,
    required String customClass,
    required int tabindex,
    required String autocomplete,
    required bool hidden,
    required bool hideLabel,
    required bool showWordCount,
    required bool showCharCount,
    required bool mask,
    required bool autofocus,
    required bool spellcheck,
    required bool disabled,
    required bool tableView,
    required bool modalEdit,
    required bool multiple,
    required bool persistent,
    required String inputFormat,
    required bool protected,
    required bool dbIndex,
    required String casE,
    required bool truncateMultipleSpaces,
    required bool encrypted,
    required String redrawOn,
    required bool clearOnHide,
    required String customDefaultValue,
    required String calculateValue,
    required bool calculateServer,
    required bool allowCalculateOverride,
    required String validateOn,
    required ValidateEntity validate,
    required bool unique,
    required String errorLabel,
    required String errors,
    required String key,
    required List tags,
    required PropertiesEntity properties,
    required ConditionalEntity conditional,
    required String customConditional,
    required List logic,
    required PropertiesEntity attributes,
    required OverlayEntity overlay,
    required String type,
    required bool input,
    required String refreshOn,
    required bool dataGridLabel,
    required List addons,
    required String inputType,
    required String id,
    required dynamic defaultValue,
    required int rows,
    required String editor,
    required bool autoExpand,
    required bool wysiwyg,
    required bool fixedSize,
    required bool delimiter,
    required String decimalLimit,
    required bool requireDecimal,
    required String shortcut,
    required String name,
    required String value,
    required String optionsLabelPosition,
    required bool inline,
    required List<ValuesEntity> values,
    required String minSelectedCountMessage,
    required String maxSelectedCountMessage,
    required bool fieldSet,
    required bool uniqueOptions,
    required String dataSrc,
    required DataEntity data,
    required String dataType,
    required String idPath,
    required String valueProperty,
    required int limit,
    required String template,
    required String refreshOnBlur,
    required bool clearOnRefresh,
    required bool searchEnabled,
    required double selectThreshold,
    required bool readOnlyValue,
    required PropertiesEntity customOptions,
    required bool useExactSearch,
    required IndexeddbEntity indexeddb,
    required String selectFields,
    required String searchField,
    required double searchDebounce,
    required int minSearch,
    required String filter,
    required bool lazyLoad,
    required bool authenticate,
    required bool ignoreCache,
    required FuseOptionsEntity fuseOptions,
    required String footer,
    required String width,
    required String height,
    required String backgroundColor,
    required String penColor,
    required String minWidth,
    required String maxWidth,
    required bool keepOverlayRatio,
    required String delimeter,
    required int maxTags,
    required String storeas,
    required String currency,
    required String dataFormat,
    required String format,
    required String displayInTimezone,
    required bool useLocaleSettings,
    required bool allowInput,
    required List shortcutButtons,
    required bool enableDate,
    required bool enableMinDateInput,
    required DatePickerEntity datePicker,
    required bool enableMaxDateInput,
    required bool enableTime,
    required TimePickerEntity timePicker,
    required String defaultDate,
    required String timezone,
    required String datepickerMode,
    required bool hideInputLabels,
    required String inputsLabelPosition,
    required FieldsEntity fields,
    required bool dayFirst,
    required String maxDate,
    required String minDate,
    required String maxYear,
    required String minYear,
    required KickboxEntity kickbox,
    required String inputMode,
    required String inputMaskPlaceholderChar,
    required String storage,
    required String dir,
    required String fileNameTemplate,
    required bool image,
    required bool uploadOnly,
    required bool webcam,
    required List<FileTypesEntity> fileTypes,
    required String filePattern,
    required String fileMinSize,
    required String fileMaxSize,
    required String imageSize,
    required bool privateDownload,
    required List<ColumnsEntity> columns,
    required bool autoAdjust,
    required bool tree,
    required List<ComponentEntity> components,
    required bool verticalLayout,
    required String legend,
    required String title,
    required String theme,
    required bool collapsible,
    required String breadcrumb,
    required int numRows,
    required int numCols,
    required bool cloneRows,
    required String cellAlignment,
    required bool striped,
    required bool bordered,
    required bool hover,
    required bool condensed,
    required List header,
    required String caption,
    required String content,
    required String selectValues,
  }) : super(
          label: label,
          labelPosition: labelPosition,
          labelWidth: labelWidth,
          labelMargin: labelMargin,
          placeholder: placeholder,
          description: description,
          tooltip: tooltip,
          prefix: prefix,
          suffix: suffix,
          widget: widget,
          inputMask: inputMask,
          displayMask: displayMask,
          allowMultipleMasks: allowMultipleMasks,
          customClass: customClass,
          tabindex: tabindex,
          autocomplete: autocomplete,
          hidden: hidden,
          hideLabel: hideLabel,
          showWordCount: showWordCount,
          showCharCount: showCharCount,
          mask: mask,
          autofocus: autofocus,
          spellcheck: spellcheck,
          disabled: disabled,
          tableView: tableView,
          modalEdit: modalEdit,
          multiple: multiple,
          persistent: persistent,
          inputFormat: inputFormat,
          protected: protected,
          dbIndex: dbIndex,
          casE: casE,
          truncateMultipleSpaces: truncateMultipleSpaces,
          encrypted: encrypted,
          redrawOn: redrawOn,
          clearOnHide: clearOnHide,
          customDefaultValue: customDefaultValue,
          calculateValue: calculateValue,
          calculateServer: calculateServer,
          allowCalculateOverride: allowCalculateOverride,
          validateOn: validateOn,
          validate: validate,
          unique: unique,
          errorLabel: errorLabel,
          errors: errors,
          key: key,
          tags: tags,
          properties: properties,
          conditional: conditional,
          customConditional: customConditional,
          logic: logic,
          attributes: attributes,
          overlay: overlay,
          type: type,
          input: input,
          refreshOn: refreshOn,
          dataGridLabel: dataGridLabel,
          addons: addons,
          inputType: inputType,
          id: id,
          defaultValue: defaultValue,
          rows: rows,
          editor: editor,
          autoExpand: autoExpand,
          wysiwyg: wysiwyg,
          fixedSize: fixedSize,
          delimiter: delimiter,
          decimalLimit: decimalLimit,
          requireDecimal: requireDecimal,
          shortcut: shortcut,
          name: name,
          value: value,
          optionsLabelPosition: optionsLabelPosition,
          inline: inline,
          values: values,
          minSelectedCountMessage: minSelectedCountMessage,
          maxSelectedCountMessage: maxSelectedCountMessage,
          fieldSet: fieldSet,
          uniqueOptions: uniqueOptions,
          dataSrc: dataSrc,
          data: data,
          dataType: dataType,
          idPath: idPath,
          valueProperty: valueProperty,
          limit: limit,
          template: template,
          refreshOnBlur: refreshOnBlur,
          clearOnRefresh: clearOnRefresh,
          searchEnabled: searchEnabled,
          selectThreshold: selectThreshold,
          readOnlyValue: readOnlyValue,
          customOptions: customOptions,
          useExactSearch: useExactSearch,
          indexeddb: indexeddb,
          selectFields: selectFields,
          searchField: searchField,
          searchDebounce: searchDebounce,
          minSearch: minSearch,
          filter: filter,
          lazyLoad: lazyLoad,
          authenticate: authenticate,
          ignoreCache: ignoreCache,
          fuseOptions: fuseOptions,
          footer: footer,
          width: width,
          height: height,
          backgroundColor: backgroundColor,
          penColor: penColor,
          minWidth: minWidth,
          maxWidth: maxWidth,
          keepOverlayRatio: keepOverlayRatio,
          delimeter: delimeter,
          maxTags: maxTags,
          storeas: storeas,
          currency: currency,
          dataFormat: dataFormat,
          format: format,
          displayInTimezone: displayInTimezone,
          useLocaleSettings: useLocaleSettings,
          allowInput: allowInput,
          shortcutButtons: shortcutButtons,
          enableDate: enableDate,
          enableMinDateInput: enableMinDateInput,
          datePicker: datePicker,
          enableMaxDateInput: enableMaxDateInput,
          enableTime: enableTime,
          timePicker: timePicker,
          defaultDate: defaultDate,
          timezone: timezone,
          datepickerMode: datepickerMode,
          hideInputLabels: hideInputLabels,
          inputsLabelPosition: inputsLabelPosition,
          fields: fields,
          dayFirst: dayFirst,
          maxDate: maxDate,
          minDate: minDate,
          maxYear: maxYear,
          minYear: minYear,
          kickbox: kickbox,
          inputMode: inputMode,
          inputMaskPlaceholderChar: inputMaskPlaceholderChar,
          storage: storage,
          dir: dir,
          fileNameTemplate: fileNameTemplate,
          image: image,
          uploadOnly: uploadOnly,
          webcam: webcam,
          fileTypes: fileTypes,
          filePattern: filePattern,
          fileMinSize: fileMinSize,
          fileMaxSize: fileMaxSize,
          imageSize: imageSize,
          privateDownload: privateDownload,
          columns: columns,
          autoAdjust: autoAdjust,
          tree: tree,
          components: components,
          verticalLayout: verticalLayout,
          legend: legend,
          title: title,
          theme: theme,
          collapsible: collapsible,
          breadcrumb: breadcrumb,
          numRows: numRows,
          numCols: numCols,
          cloneRows: cloneRows,
          cellAlignment: cellAlignment,
          striped: striped,
          bordered: bordered,
          hover: hover,
          condensed: condensed,
          header: header,
          caption: caption,
          content: content,
          selectValues: selectValues,
        );

  factory ComponentsAdapter.fromMap(Map<String, dynamic> map) {
    return ComponentsAdapter(
      label: map['label'] ?? '',
      labelPosition: map['labelPosition'] ?? '',
      labelWidth: map['labelWidth'] ?? '',
      labelMargin: map['labelMargin'] ?? '',
      placeholder: map['placeholder'] ?? '',
      description: map['description'] ?? '',
      tooltip: map['tooltip'] ?? '',
      prefix: map['prefix'] ?? '',
      suffix: map['suffix'] ?? '',

      //TODO: validaçao fora do contexto do package
      widget: WidgetAdapter.fromMap(
        (map['widget'].runtimeType.toString() == 'String') ||
                map['widget'] == null
            ? {}
            : map['widget'],
      ),
      inputMask: map['inputMask'] ?? '',
      displayMask: map['displayMask'] ?? '',
      allowMultipleMasks: map['allowMultipleMasks'] ?? false,
      customClass: map['customClass'] ?? '',
      tabindex: map['tabindex'] == '' || map['tabindex'] == null
          ? 0
          : map['tabindex'],
      autocomplete: map['autocomplete'] ?? '',
      hidden: map['hidden'] ?? false,
      hideLabel: map['hideLabel'] ?? false,
      showWordCount: map['showWordCount'] ?? false,
      showCharCount: map['showCharCount'] ?? false,
      mask: map['mask'] ?? false,
      autofocus: map['autofocus'] ?? false,
      spellcheck: map['spellcheck'] ?? false,
      disabled: map['disabled'] ?? false,
      tableView: map['tableView'] ?? false,
      modalEdit: map['modalEdit'] ?? false,
      multiple: map['multiple'] ?? false,
      persistent: map['persistent'] ?? false,
      inputFormat: map['inputFormat'] ?? '',
      protected: map['protected'] ?? false,
      dbIndex: map['dbIndex'] ?? false,
      casE: map['casE'] ?? '',
      truncateMultipleSpaces: map['truncateMultipleSpaces'] ?? false,
      encrypted: map['encrypted'] ?? false,
      redrawOn: map['redrawOn'] ?? '',
      clearOnHide: map['clearOnHide'] ?? false,
      customDefaultValue: map['customDefaultValue'] ?? '',
      calculateValue: map['calculateValue'] ?? '',
      calculateServer: map['calculateServer'] ?? false,
      allowCalculateOverride: map['allowCalculateOverride'] ?? false,
      validateOn: map['validateOn'] ?? '',
      validate: ValidateAdapter.fromMap(map['validate'] ?? {}),
      unique: map['unique'] ?? false,
      errorLabel: map['errorLabel'] ?? '',
      errors: map['errors'] ?? '',
      key: map['key'] ?? '',
      tags: List<dynamic>.from(map['tags'] ?? []),
      properties: PropertiesAdapter.fromMap(map['properties'] ?? {}),
      conditional: ConditionalAdapter.fromMap(map['conditional'] ?? {}),
      customConditional: map['customConditional'] ?? '',
      logic: List<dynamic>.from(map['logic'] ?? []),
      attributes: PropertiesAdapter.fromMap(map['attributes'] ?? {}),
      overlay: OverlayAdapter.fromMap(map['overlay'] ?? {}),
      type: map['type'] ?? 'container',
      input: map['input'] ?? false,
      refreshOn: map['refreshOn'] ?? '',
      dataGridLabel: map['dataGridLabel'] ?? false,
      addons: List<dynamic>.from(map['addons'] ?? []),
      inputType: map['inputType'] ?? '',
      id: map['id'] ?? '',
      defaultValue: (map['defaultValue'] is List)
          ? List?.from(map['defaultValue'])
          : map['defaultValue'] ?? '',

      rows: map['rows'] ?? 1,
      //  map['rows'] != null
      //     ? ((map['rows'] is List) ? List.from(map['rows']) : map['rows'])
      //     : map['rows'],

      editor: map['editor'] ?? '',
      autoExpand: map['autoExpand'] ?? false,
      wysiwyg: map['wysiwyg'] ?? false,
      fixedSize: map['fixedSize'] ?? false,
      delimiter: map['delimiter'] ?? false,
      decimalLimit: map['decimalLimit'] ?? '',
      requireDecimal: map['requireDecimal'] ?? false,
      shortcut: map['shortcut'] ?? '',
      name: map['name'] ?? '',
      value: map['value'] ?? '',
      optionsLabelPosition: map['optionsLabelPosition'] ?? '',
      inline: map['inline'] ?? false,
      values: List<ValuesEntity>.from(map['values']
              ?.map((e) => ValuesAdapter.fromMap(e as Map<String, dynamic>)) ??
          []),
      minSelectedCountMessage: map['minSelectedCountMessage'] ?? '',
      maxSelectedCountMessage: map['maxSelectedCountMessage'] ?? '',
      fieldSet: map['fieldSet'] ?? false,
      uniqueOptions: map['uniqueOptions'] ?? false,
      dataSrc: map['dataSrc'] ?? '',
      data: DataAdapter.fromMap(map['data'] ?? {}),
      dataType: map['dataType'] ?? '',
      idPath: map['idPath'] ?? '',
      valueProperty: map['valueProperty'] ?? '',
      limit: map['limit']?.toInt() ?? 0,
      template: map['template'] ?? '',
      refreshOnBlur: map['refreshOnBlur'] ?? '',
      clearOnRefresh: map['clearOnRefresh'] ?? false,
      searchEnabled: map['searchEnabled'] ?? false,
      selectThreshold: map['selectThreshold']?.toDouble() ?? 0.0,
      readOnlyValue: map['readOnlyValue'] ?? false,
      customOptions: PropertiesAdapter.fromMap(map['customOptions'] ?? {}),
      useExactSearch: map['useExactSearch'] ?? false,
      indexeddb: IndexeddbAdapter.fromMap(map['indexeddb'] ?? {}),
      selectFields: map['selectFields'] ?? '',
      searchField: map['searchField'] ?? '',
      searchDebounce: map['searchDebounce']?.toDouble() ?? 0.0,
      minSearch: map['minSearch']?.toInt() ?? 0,
      filter: map['filter'] ?? '',
      lazyLoad: map['lazyLoad'] ?? false,
      authenticate: map['authenticate'] ?? false,
      ignoreCache: map['ignoreCache'] ?? false,
      fuseOptions: FuseOptionsAdapter.fromMap(map['fuseOptions'] ?? {}),
      footer: map['footer'] ?? '',
      width: map['width'] ?? '',
      height: map['height'] ?? '',
      backgroundColor: map['backgroundColor'] ?? '',
      penColor: map['penColor'] ?? '',
      minWidth: map['minWidth'] ?? '',
      maxWidth: map['maxWidth'] ?? '',
      keepOverlayRatio: map['keepOverlayRatio'] ?? false,
      delimeter: map['delimeter'] ?? '',
      maxTags: map['maxTags']?.toInt() ?? 0,
      storeas: map['storeas'] ?? '',
      currency: map['currency'] ?? '',
      dataFormat: map['dataFormat'] ?? '',
      format: map['format'] ?? '',
      displayInTimezone: map['displayInTimezone'] ?? '',
      useLocaleSettings: map['useLocaleSettings'] ?? false,
      allowInput: map['allowInput'] ?? false,
      shortcutButtons: List<dynamic>.from(map['shortcutButtons'] ?? []),
      enableDate: map['enableDate'] ?? false,
      enableMinDateInput: map['enableMinDateInput'] ?? false,
      datePicker: DatePickerAdapter.fromMap(map['datePicker'] ?? {}),
      enableMaxDateInput: map['enableMaxDateInput'] ?? false,
      enableTime: map['enableTime'] ?? false,
      timePicker: TimePickerAdapter.fromMap(map['timePicker'] ?? {}),
      defaultDate: map['defaultDate'] ?? '',
      timezone: map['timezone'] ?? '',
      datepickerMode: map['datepickerMode'] ?? '',
      hideInputLabels: map['hideInputLabels'] ?? false,
      inputsLabelPosition: map['inputsLabelPosition'] ?? '',
      fields: FieldsAdapter.fromMap(map['fields'] ?? {}),
      dayFirst: map['dayFirst'] ?? false,
      maxDate: map['maxDate'] ?? '',
      minDate: map['minDate'] ?? '',
      maxYear: map['maxYear'] ?? '',
      minYear: map['minYear'] ?? '',
      kickbox: KickboxAdapter.fromMap(map['kickbox'] ?? {}),
      inputMode: map['inputMode'] ?? '',
      inputMaskPlaceholderChar: map['inputMaskPlaceholderChar'] ?? '',
      storage: map['storage'] ?? '',
      dir: map['dir'] ?? '',
      fileNameTemplate: map['fileNameTemplate'] ?? '',
      image: map['image'] ?? false,
      uploadOnly: map['uploadOnly'] ?? false,
      webcam: map['webcam'] ?? false,
      fileTypes: List<FileTypesEntity>.from(map['fileTypes']?.map(
              (e) => FileTypesAdpter.fromMap(e as Map<String, dynamic>)) ??
          []),
      filePattern: map['filePattern'] ?? '',
      fileMinSize: map['fileMinSize'] ?? '',
      fileMaxSize: map['fileMaxSize'] ?? '',
      imageSize: map['imageSize'] ?? '',
      privateDownload: map['privateDownload'] ?? false,
      columns: List<ColumnsEntity>.from(map['columns']
              ?.map((e) => ColumnsAdapter.fromMap(e as Map<String, dynamic>)) ??
          []),
      autoAdjust: map['autoAdjust'] ?? false,
      tree: map['tree'] ?? false,
      components: List<ComponentEntity>.from(map['components']?.map(
              (e) => ComponentsAdapter.fromMap(e as Map<String, dynamic>)) ??
          []),
      verticalLayout: map['verticalLayout'] ?? false,
      legend: map['legend'] ?? '',
      title: map['title'] ?? '',
      theme: map['theme'] ?? '',
      collapsible: map['collapsible'] ?? false,
      breadcrumb: map['breadcrumb'] ?? '',
      numRows: map['numRows']?.toInt() ?? 0,
      numCols: map['numCols']?.toInt() ?? 0,
      cloneRows: map['cloneRows'] ?? false,
      cellAlignment: map['cellAlignment'] ?? '',
      striped: map['striped'] ?? false,
      bordered: map['bordered'] ?? false,
      hover: map['hover'] ?? false,
      condensed: map['condensed'] ?? false,
      header: List<dynamic>.from(map['header'] ?? []),
      caption: map['caption'] ?? '',
      content: map['content'] ?? '',
      selectValues: map['selectValues'] ?? '',
    );
  }
}
